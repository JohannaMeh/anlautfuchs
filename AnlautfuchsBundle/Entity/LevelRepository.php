<?php

namespace AnlautfuchsBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * LevelRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LevelRepository extends EntityRepository
{
    /* 
        Returns all main levels without parents.
    */
    public function getParentLevels($withChildren = true){

        $query = $this->createQueryBuilder('l')
            ->where('l.parentLevel is NULL')
            ->getQuery();


        $parentLevel = $query->getResult();

        if($withChildren){
            foreach($parentLevel as $level){
                $level->setChildren($this->getChildren($level));
            }
        }

        return $parentLevel;
    }

    /* 
        Returns sublevels (children) of a given level.
    */
    public function getChildren($level){

        $query = $this->createQueryBuilder('l')
            ->where('l.parentLevel = :levelid')
            ->setParameter('levelid', $level->getId())
            ->getQuery();

        return $query->getResult();
        
    }

    /* 
        Returns data about level for the game
    */
    public function getLevelForGame($levelId){
        $query = $this->createQueryBuilder('l')
            ->where('l.id = :levelid')
            ->setParameter('levelid', $levelId)
            ->getQuery();

        //return $query->getArrayResult();
        return $query->getOneOrNullResult();
    }

    /* 
        Returns all levels which are after the given level in the game.
    */
    public function getFollowingLevelIds($levelId){
        $query = $this->createQueryBuilder('l')
            ->where('l.id = :levelid')
            ->setParameter('levelid', $levelId)
            ->getQuery();

        $level = $query->getOneOrNullResult();

        $query = $this->createQueryBuilder('l')
            ->where('l.sorting > :sorting')
            ->setParameter('sorting', $level->getSorting())
            ->getQuery();

        $followingResults = $query->getArrayResult();

        $levelIds = array();

        foreach($followingResults as $result){
            $levelIds[] = $result['id'];
        }

        return $levelIds;
    }
    
}
